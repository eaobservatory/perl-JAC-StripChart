#!/local/perl/bin/perl

=head1 NAME

stripchart - stripchart control program

=head1 SYNOPSIS

 % stripchart -help
 % stripchart -cfg scuba.ini

=head1 DESCRIPTION

Program to display stripcharts using the specified configuration file.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-cfg>

Name of the configuration file to use to configure the stripchart.
By default the stripchart will use "chart.ini".

=item B<-help>

Print help information.

=item B<-version>

Print stripchart version.

=item B<-man>

Print the documentation to STDOUT.

=back

=cut

use warnings;
use strict;
use Getopt::Long;
use Pod::Usage;

use JAC::StripChart;

use vars qw/ $DEBUG /;
$DEBUG = 0;

# Options
my ($help, $man, $version, $cfgfile);
my $status = GetOptions("help" => \$help,
                        "man" => \$man,
                        "version" => \$version,
                        "cfg=s" => \$cfgfile,
                       );

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
  my $id = '$Id$ ';
  print "Stripchart tool for ORAC-DR pipeline\n";
  print " CVS revision: $id\n";
  exit;
}

# determine the configuration file whereabouts
$cfgfile = 'chart.ini' unless $cfgfile;

# Now create the stripchart
my $st = new JAC::StripChart( $cfgfile );

$st->init;


# Need to know whether to start a Tk event loop
my @devs = $st->devices();
if (grep { ref($_) =~ /::Tk/ } @devs) {
  # there will be a MainWindow created automatically
  # but we still need it
  my $ctxt;
  for my $d (@devs) {
    $ctxt = $d->context;
    if (defined $ctxt && $ctxt->isa( "Tk::Frame" )) {
      last;
    }
  }

  # set up the update loop
  &tkrepeat( $ctxt );
  Tk::MainLoop();
} else {
  $st->MainLoop;
}



exit;

sub tkrepeat {
  my $context = shift;
  $context->after( 1000,
		   sub { $st->update();
			 print "Updating...\n";
			 $context->after(1000, [\&tkrepeat, $context]);
		       }
		 );
}
