#!/local/perl/bin/perl

=head1 NAME

xstripchart - stripchart control program with a GUI

=head1 SYNOPSIS

 % xstripchart -help
 % xstripchart -cfg scuba.ini

=head1 DESCRIPTION

Program to display stripcharts using the specified configuration file.
Includes a control GUI.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-cfg>

Name of the configuration file to use to configure the stripchart.
By default the stripchart will use "chart.ini".

=item B<-dev>

By default, the device class is read from the configuration file.
If this option is specified, all charts will be created using this
device class

=item B<-help>

Print help information.

=item B<-version>

Print stripchart version.

=item B<-man>

Print the documentation to STDOUT.

=back

=cut

use warnings;
use strict;
use Getopt::Long;
use Pod::Usage;

use Tk;
use JAC::StripChart;
use JAC::StripChart::Event::Tk;

use vars qw/ $DEBUG /;
$DEBUG = 0;

# Options
my ($help, $man, $version, $cfgfile, $dev);
my $status = GetOptions("help" => \$help,
                        "man" => \$man,
			"dev=s" => \$dev,
                        "version" => \$version,
                        "cfg=s" => \$cfgfile,
                       );

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
  my $id = '$Id$ ';
  print "Stripchart tool and GUI for ORAC-DR pipeline\n";
  print " CVS revision: $id\n";
  exit;
}

# determine the configuration file whereabouts
$cfgfile = 'chart.ini' unless $cfgfile;

# Assume device class is AST::
# do not check case
my %init;
if ($dev) {
  my $c = $dev;
  $c = "AST::$c" unless $c =~ /^AST/;
  $init{output_class} = $c;
}

# Now create the stripchart
my $st = new JAC::StripChart( $cfgfile, %init );

# Create the main window
my $MW = new MainWindow();

# Frame for control panel
my $CFrame = $MW->Frame->grid( -row => 0, -column => 0, -sticky => 'nw');

# Create some control panel
create_control_panel( $CFrame );

# Frame for stripchart
my $StFrame = $MW->Frame->grid( -row => 1, -column => 0, -sticky => 'nsew' );

# Need to pass in the context frame for Tk canvases (if enabled)
$st->init( context => $StFrame );

# Now we need to run a Tk main loop but also guarantee
# that other loops are handled properly
# Specify the preferred event loop
$st->MainLoop( JAC::StripChart::Event::Tk->new( context => $MW ) );

exit;

# GUI code

sub create_control_panel {
  my $w = shift;

  $w->Button( -text => 'Exit', -command => sub { exit;})->pack(-side => 'left');

}

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=head1 SEE ALSO

L<stripchart>, L<JAC::StripChart>

=cut
